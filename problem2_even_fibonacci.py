# Euler Project problem statement
# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
# Answer: 1089154

def even_fibonacci(n):
    """
    Obtain the sum of terms in Fibonacci sequence less than n

    Args:
    n - Limiting natural number

    Returns:
    total - Sum of odd fibs less than n

    >>> even_fibonacci(13)
    10

    >>> even_fibonacci(3)
    2
    """
    sum = 0    

    # Let us take care of the cases where n=1 or n=2

    if n<3:
        if n==1:
            return 0
        if n==2:
            return 2
    
    # Now the meat of the problem
    # We keep track of the two most recent Fibs

    prev_fib = 1
    fib = 1

    while(fib<n):
        # If less than limit, obtain the next number of the sequence and keep track of the penultimate number of the series
        tmp = fib
        fib = fib + prev_fib
        prev_fib = tmp

        # If the fibonacci number is even, add it to the sum
        if (fib%2)==0:
            sum+=fib
    
    return sum

if __name__=='__main__':
    print(even_fibonacci(1000000))
